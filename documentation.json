{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "AccountService",
            "id": "injectable-AccountService-ac5b7199514dfb2f66736c1607c461b8",
            "file": "src/app/services/account.service.ts",
            "properties": [
                {
                    "name": "store",
                    "type": "Store<AppState>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "user",
                    "type": "Observable<User>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userSubject",
                    "type": "BehaviorSubject<User>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "username",
                            "type": ""
                        },
                        {
                            "name": "password",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "user",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { User } from '../models/user';\nimport { environment } from '../../environments/environment';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../app.model';\nimport { IsLoggedIn } from '../store/app.actions';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AccountService {\n    private userSubject: BehaviorSubject<User>;\n    public user: Observable<User>;\n\n    constructor(\n        private router: Router,\n        private http: HttpClient,\n        public store: Store<AppState>\n    ) {\n        this.userSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('user')));\n        this.user = this.userSubject.asObservable();\n    }\n\n    public get userValue(): User {\n        return this.userSubject.value;\n    }\n\n    login(username, password) {\n        return this.http.post<User>(`${environment.apiUrl}/users/authenticate`, { username, password })\n            .pipe(map(user => {\n                localStorage.setItem('user', JSON.stringify(user));\n                this.userSubject.next(user);\n                return user;\n            }));\n    }\n\n    logout() {\n        localStorage.removeItem('user');\n        this.userSubject.next(null);\n        this.router.navigate(['/']);\n        this.store.dispatch(new IsLoggedIn(false));\n    }\n\n    register(user) {\n        return this.http.post(`${environment.apiUrl}/users/register`, user);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "userValue": {
                    "name": "userValue",
                    "getSignature": {
                        "name": "userValue",
                        "type": "",
                        "returnType": "User",
                        "line": 28
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "AppEffects",
            "id": "injectable-AppEffects-27a8aab414bca834d1b2b031eb04c311",
            "file": "src/app/effects/app.effects.ts",
            "properties": [
                {
                    "name": "addLinks$",
                    "defaultValue": "this.actions$.pipe(\r\n        ofType(AppActionType.SAVE_SHARED_LINKS),\r\n        switchMap((action: SaveSharedLinks) => {\r\n            return this.activityService.addLinks(action.requestBody).pipe(\r\n                map((obj: any) => new SaveSharedLinksSuccess(obj)),\r\n                catchError(error => of(new FetchUserDataError(error.status)))\r\n            );\r\n        })\r\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "deleteLink$",
                    "defaultValue": "this.actions$.pipe(\r\n        ofType(AppActionType.DELETE_LINK),\r\n        switchMap((action: DeleteLink) => {\r\n            return this.activityService.deleteLink(action.id).pipe(\r\n                map((obj: any) => new DeleteLinkSuccess(obj)),\r\n                catchError(error => of(new DeleteLinkError(error.status)))\r\n            );\r\n        })\r\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "updateLink$",
                    "defaultValue": "this.actions$.pipe(\r\n        ofType(AppActionType.UPDATE_LINK),\r\n        switchMap((action: UpdateLink) => {\r\n            return this.activityService.updateLink(action.id,action.requestBody).pipe(\r\n                map((obj: any) => new UpdateLinkSuccess(obj)),\r\n                catchError(error => of(new UpdateLinkError(error.status)))\r\n            );\r\n        })\r\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userData$",
                    "defaultValue": "this.actions$.pipe(\r\n        ofType(AppActionType.FETCH_USER_DATA),\r\n        switchMap((action: FetchUserData) => {\r\n            return this.activityService.fetchLinks().pipe(\r\n                map((obj: any) => new FetchUserDataSuccess(obj)),\r\n                catchError(error => of(new FetchUserDataError(error.status)))\r\n            );\r\n        })\r\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../app.model';\r\nimport { Effect, Actions, ofType } from '@ngrx/effects';\r\nimport { AppServiceService } from '../services/app-service.service';\r\nimport { AppActionType, FetchUserData, FetchUserDataSuccess, FetchUserDataError, SaveSharedLinks, SaveSharedLinksSuccess, DeleteLink, DeleteLinkSuccess, DeleteLinkError, UpdateLink, UpdateLinkSuccess, UpdateLinkError } from '../store/app.actions';\r\nimport { switchMap, map, catchError } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\n@Injectable()\r\nexport class AppEffects {\r\n\r\n    @Effect()\r\n    public userData$ = this.actions$.pipe(\r\n        ofType(AppActionType.FETCH_USER_DATA),\r\n        switchMap((action: FetchUserData) => {\r\n            return this.activityService.fetchLinks().pipe(\r\n                map((obj: any) => new FetchUserDataSuccess(obj)),\r\n                catchError(error => of(new FetchUserDataError(error.status)))\r\n            );\r\n        })\r\n    );\r\n\r\n    @Effect()\r\n    public addLinks$ = this.actions$.pipe(\r\n        ofType(AppActionType.SAVE_SHARED_LINKS),\r\n        switchMap((action: SaveSharedLinks) => {\r\n            return this.activityService.addLinks(action.requestBody).pipe(\r\n                map((obj: any) => new SaveSharedLinksSuccess(obj)),\r\n                catchError(error => of(new FetchUserDataError(error.status)))\r\n            );\r\n        })\r\n    );\r\n\r\n    @Effect()\r\n    public deleteLink$ = this.actions$.pipe(\r\n        ofType(AppActionType.DELETE_LINK),\r\n        switchMap((action: DeleteLink) => {\r\n            return this.activityService.deleteLink(action.id).pipe(\r\n                map((obj: any) => new DeleteLinkSuccess(obj)),\r\n                catchError(error => of(new DeleteLinkError(error.status)))\r\n            );\r\n        })\r\n    );\r\n\r\n    @Effect()\r\n    public updateLink$ = this.actions$.pipe(\r\n        ofType(AppActionType.UPDATE_LINK),\r\n        switchMap((action: UpdateLink) => {\r\n            return this.activityService.updateLink(action.id,action.requestBody).pipe(\r\n                map((obj: any) => new UpdateLinkSuccess(obj)),\r\n                catchError(error => of(new UpdateLinkError(error.status)))\r\n            );\r\n        })\r\n    );\r\n    \r\n    constructor( private store: Store<AppState>,private actions$: Actions, private activityService: AppServiceService,) {}\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "activityService",
                        "type": "AppServiceService"
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activityService",
                        "type": "AppServiceService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AppServiceService",
            "id": "injectable-AppServiceService-da8edf9dd3d67929800fc76d97427802",
            "file": "src/app/services/app-service.service.ts",
            "properties": [
                {
                    "name": "http",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addLinks",
                    "args": [
                        {
                            "name": "requestBody",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "requestBody",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteLink",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "updateLink",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        },
                        {
                            "name": "requestBody",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestBody",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../environments/environment'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppServiceService {\n  constructor(public http: HttpClient) { }\n\n  public fetchLinks(): Observable<any> {\n    return this.http.get<any>(`${environment.url}/posts`);\n  }\n\n  public addLinks(requestBody): Observable<any> {\n    return this.http.post<any>(`${environment.url}/posts`, requestBody);\n  }\n\n  public deleteLink(id): Observable<any> {\n    return this.http.delete<any>(`${environment.url}/posts/${id}`);\n  }\n\n  public updateLink(id, requestBody): Observable<any> {\n    console.log(id,requestBody);\n    \n    return this.http.put<any>(`${environment.url}/posts/${id}`, requestBody);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-c4e68d26016b532e6bad430b7f893a70",
            "file": "src/app/services/theme.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDark",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "toggleLight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nexport const darkTheme = {\r\n  'primary-color': '#455363',\r\n  'background-color': '#1f2935',\r\n  'text-color': '#fff'\r\n};\r\n\r\nexport const lightTheme = {\r\n  'primary-color': '#fff',\r\n  'background-color': '#fff',\r\n  'text-color': '#2d2d2d'\r\n};\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ThemeService {\r\n  toggleDark() {\r\n    this.setTheme(darkTheme);\r\n  }\r\n\r\n  toggleLight() {\r\n    this.setTheme(lightTheme);\r\n  }\r\n\r\n  private setTheme(theme: {}) {\r\n    Object.keys(theme).forEach(k =>\r\n      document.documentElement.style.setProperty(`--${k}`, theme[k])\r\n    );\r\n  }\r\n}",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppModelState",
            "id": "class-AppModelState-940db862f52281ed4efafa5517c45357",
            "file": "src/app/models/appModel.model.ts",
            "type": "class",
            "sourceCode": "export class AppModelState {\r\n    data: any;\r\n    isLoggedIn: boolean;\r\n    requestBody: any;\r\n    id: any\r\n}",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "id",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isLoggedIn",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "requestBody",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppState",
            "id": "class-AppState-8b170a2d49eab1e89b4123adbd7ff197",
            "file": "src/app/app.model.ts",
            "type": "class",
            "sourceCode": "import { AppModelState } from './models/appModel.model';\r\n\r\nexport class AppState {\r\n    appModel: AppModelState;\r\n}",
            "properties": [
                {
                    "name": "appModel",
                    "type": "AppModelState",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteLink",
            "id": "class-DeleteLink-4a6c4838e57e1e7e6ea6c1de0a74cd7a",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    FETCH_USER_DATA_SUCCESS\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "id",
                        "type": "any"
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.DELETE_LINK",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteLinkError",
            "id": "class-DeleteLinkError-4a6c4838e57e1e7e6ea6c1de0a74cd7a",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    FETCH_USER_DATA_SUCCESS\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "error",
                        "type": "any"
                    }
                ],
                "line": 67,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "error",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.DELETE_LINK_ERROR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteLinkSuccess",
            "id": "class-DeleteLinkSuccess-4a6c4838e57e1e7e6ea6c1de0a74cd7a",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    FETCH_USER_DATA_SUCCESS\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.DELETE_LINK_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "FetchUserData",
            "id": "class-FetchUserData-4a6c4838e57e1e7e6ea6c1de0a74cd7a",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    FETCH_USER_DATA_SUCCESS\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 21
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AppActionType.FETCH_USER_DATA",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "FetchUserDataError",
            "id": "class-FetchUserDataError-4a6c4838e57e1e7e6ea6c1de0a74cd7a",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    FETCH_USER_DATA_SUCCESS\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "error",
                        "type": "any"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "error",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.FETCH_USER_DATA_ERROR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "FetchUserDataSuccess",
            "id": "class-FetchUserDataSuccess-4a6c4838e57e1e7e6ea6c1de0a74cd7a",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    FETCH_USER_DATA_SUCCESS\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "FETCH_USER_DATA_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.FETCH_USER_DATA_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "IsLoggedIn",
            "id": "class-IsLoggedIn-4a6c4838e57e1e7e6ea6c1de0a74cd7a",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    FETCH_USER_DATA_SUCCESS\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "isLoggedIn",
                        "type": "boolean"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "isLoggedIn",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "isLoggedIn",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.IS_LOGGED_IN",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SaveSharedLinks",
            "id": "class-SaveSharedLinks-4a6c4838e57e1e7e6ea6c1de0a74cd7a",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    FETCH_USER_DATA_SUCCESS\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "requestBody",
                        "type": "any"
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "requestBody",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "requestBody",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.SAVE_SHARED_LINKS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SaveSharedLinksError",
            "id": "class-SaveSharedLinksError-4a6c4838e57e1e7e6ea6c1de0a74cd7a",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    FETCH_USER_DATA_SUCCESS\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "error",
                        "type": "any"
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "error",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.SAVE_SHARED_LINKS_ERROR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SaveSharedLinksSuccess",
            "id": "class-SaveSharedLinksSuccess-4a6c4838e57e1e7e6ea6c1de0a74cd7a",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    FETCH_USER_DATA_SUCCESS\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.SAVE_SHARED_LINKS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateLink",
            "id": "class-UpdateLink-4a6c4838e57e1e7e6ea6c1de0a74cd7a",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    FETCH_USER_DATA_SUCCESS\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "id",
                        "type": "any"
                    },
                    {
                        "name": "requestBody",
                        "type": "any"
                    }
                ],
                "line": 72,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "requestBody",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "requestBody",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.UPDATE_LINK",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateLinkError",
            "id": "class-UpdateLinkError-4a6c4838e57e1e7e6ea6c1de0a74cd7a",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    FETCH_USER_DATA_SUCCESS\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "error",
                        "type": "any"
                    }
                ],
                "line": 82,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "error",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.UPDATE_LINK_ERROR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateLinkSuccess",
            "id": "class-UpdateLinkSuccess-4a6c4838e57e1e7e6ea6c1de0a74cd7a",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    FETCH_USER_DATA_SUCCESS\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.UPDATE_LINK_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "User",
            "id": "class-User-eb0459e27e62dba5d878bc3f3c9ddc21",
            "file": "src/app/models/user.ts",
            "type": "class",
            "sourceCode": "export class User {\r\n    id: string;\r\n    username: string;\r\n    password: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    token: string;\r\n}",
            "properties": [
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "token",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-ae3db476ce9f4d6e79f104a9059b8783",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "darkTheme",
                    "defaultValue": "new FormControl(false)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "selectData$",
                    "defaultValue": "this.store.select(selectData)",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectIsLoggedIn$",
                    "defaultValue": "this.store.select(selectIsLoggedIn)",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "store",
                    "type": "Store<AppState>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "user",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { AppState } from './app.model';\nimport { FetchUserData, IsLoggedIn } from './store/app.actions';\nimport { AccountService } from './services/account.service';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { selectIsLoggedIn, selectData } from './store/app.selectors';\nimport { ThemeService } from '../app/services/theme.service';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  user: boolean;\n  darkTheme = new FormControl(false);\n  public selectIsLoggedIn$: Observable<boolean> = this.store.select(selectIsLoggedIn);\n  public selectData$: Observable<any> = this.store.select(selectData);\n\n  constructor(\n    private accountService: AccountService,\n    private router: Router,\n    public store: Store<AppState>,\n    private themeService: ThemeService) {\n    this.store.dispatch(new IsLoggedIn(false));\n    this.store.dispatch(new FetchUserData());\n    this.selectIsLoggedIn$.subscribe(val => {\n      this.user = val;\n    });\n\n    this.darkTheme.valueChanges.subscribe(value => {\n      if (value) {\n        this.themeService.toggleDark();\n      } else {\n        this.themeService.toggleLight();\n      }\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  logout() {\n    this.accountService.logout();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  background-color: var(--primary-color);\r\n  color: var(--text-color);\r\n}\r\n\r\n.item1 { grid-area: header;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    background-color: #1abc9c;\r\n    height:80px;\r\n    .head-line{\r\n      display: flex;\r\n       justify-content: space-between;\r\n       width: 17rem;\r\n      h1{\r\n        \r\n        @media screen and (min-width: 320px) and (max-width: 480px) {\r\n          font-size: 14px;\r\n        }\r\n      }\r\n      img{\r\n        margin-top: 1rem;\r\n      };\r\n    }\r\n\r\n    .top-nav{\r\n      display: flex;\r\n      flex-flow: row;\r\n      margin: 1rem;\r\n      .btns{\r\n        display: flex;\r\n        justify-content: space-between;\r\n        width: 9rem;\r\n        .btns-text{\r\n          cursor: pointer;\r\n        }\r\n      }\r\n      .switch {\r\n        position: relative;\r\n        display: inline-block;\r\n        width: 60px;\r\n        height: 34px;\r\n      }\r\n      .switch input { \r\n        opacity: 0;\r\n        width: 0;\r\n        height: 0;\r\n      }\r\n      \r\n      .slider {\r\n        position: absolute;\r\n        cursor: pointer;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        background-color: black;\r\n        -webkit-transition: .4s;\r\n        transition: .4s;\r\n      }\r\n      \r\n      .slider:before {\r\n        position: absolute;\r\n        content: \"\";\r\n        height: 26px;\r\n        width: 26px;\r\n        left: 4px;\r\n        bottom: 4px;\r\n        background-color: #1abc9c;\r\n        -webkit-transition: .4s;\r\n        transition: .4s;\r\n      }    \r\n      input:checked + .slider {\r\n        background-color: white;\r\n      }\r\n      \r\n      input:focus + .slider {\r\n        box-shadow: 0 0 1px white;\r\n      }\r\n      \r\n      input:checked + .slider:before {\r\n        -webkit-transform: translateX(26px);\r\n        -ms-transform: translateX(26px);\r\n        transform: translateX(26px);\r\n      }\r\n      .slider.round {\r\n        border-radius: 34px;\r\n      }\r\n      \r\n      .slider.round:before {\r\n        border-radius: 50%;\r\n      }\r\n    }\r\n   \r\n}\r\n.item2 { grid-area: menu; }\r\n.item3 { grid-area: main;\r\n         display: grid;;\r\n         grid-template-columns: auto auto;\r\n         @media screen and (min-width: 320px) and (max-width: 480px) {\r\n          font-size: 14px;\r\n          grid-template-columns: auto;\r\n        }\r\n         width: 100%;\r\n    column-width: 19em;\r\n    -webkit-column-width: 19em;\r\n    column-gap: 1em;\r\n    -webkit-column-gap: 1em;\r\n         \r\n.item4 { grid-area: right; }\r\n.item5 { grid-area: footer; }\r\n\r\n.grid-container {\r\n  display: grid;\r\n  grid-template-areas:\r\n    'header header header header header header'\r\n    'menu menu menu menu menu menu'\r\n    'main main main main main main'\r\n    'footer footer footer footer footer footer';\r\n  grid-gap: 10px;\r\n  padding: 10px;\r\n}\r\n\r\n.header {\r\n  overflow: hidden;\r\n  background-color: #f1f1f1;\r\n  padding: 20px 10px;\r\n}\r\n\r\n.header a {\r\n  float: left;\r\n  color: black;\r\n  text-align: center;\r\n  padding: 12px;\r\n  text-decoration: none;\r\n  font-size: 18px; \r\n  line-height: 25px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.header a.logo {\r\n  font-size: 25px;\r\n  font-weight: bold;\r\n}\r\n\r\n.header a:hover {\r\n  background-color: #ddd;\r\n  color: black;\r\n}\r\n\r\n.header a.active {\r\n  background-color: dodgerblue;\r\n  color: white;\r\n}\r\n\r\n.header-right {\r\n  float: right;\r\n}\r\n\r\n@media screen and (max-width: 500px) {\r\n  .header a {\r\n    float: none;\r\n    display: block;\r\n    text-align: left;\r\n  }\r\n  \r\n  .header-right {\r\n    float: none;\r\n  }\r\n}\r\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "accountService",
                        "type": "AccountService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"grid-container\">\n  <div class=\"item1\" *ngIf=\"!user\">\n    <div class=\"head-line\"> <h1>Movie Share</h1><span><img src=\"../assets/svg/movie-recorder-svgrepo-com.svg\"/></span></div>\n    <div class=\"top-nav\">\n      <div class=\"btns\">\n        <app-button class=\"btns-text\" [buttonConfig]=\"{text: 'Login'}\" routerLink=\"/login\"></app-button>\n        &nbsp;\n        <app-button class=\"btns-text\" [buttonConfig]=\"{text: 'Register'}\" routerLink=\"/register\"></app-button>\n      </div>\n      <app-theme></app-theme>\n      <!-- <label class=\"switch\">\n        <input  id=\"darkTheme\" type=\"checkbox\"  [formControl]=\"darkTheme\"/>\n        <span class=\"slider round\"></span>\n      </label> -->\n    </div>\n  </div>\n  <div class=\"item2\">\n    <router-outlet></router-outlet>\n  </div>\n  <section class=\"item3\" *ngIf=\"!user\">\n    <div *ngFor=\"let data of (selectData$ | async)\">\n      <sa-card title = \"{{data.title}}\" desc = \"{{data.description}}\" category = \"{{data.category}}\" year = \"{{data.year}}\"></sa-card>\n    </div>\n  </section>\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-c5e3aa282df5e72f3636ef6573e1261f-1",
            "file": "src/app/shared/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonConfig",
                    "line": 9,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.scss']\r\n})\r\nexport class ButtonComponent implements OnInit {\r\n  @Input() buttonConfig: any;\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n      color: var(--text-color);\r\n    }\r\n.text-btn{\r\n      background-color: #1abc9c;\r\n      color: white;\r\n      margin: 8px 0;\r\n      border: none;\r\n      cursor: pointer;\r\n      width: 100%;\r\n      font-size: 18px;\r\n  }\r\n\r\n  .img-btn{\r\n        position: 'relative';\r\n        width: '100px';\r\n        height: '100px';\r\n        cursor: pointer;\r\n  }\r\n\r\n//   .storybook-button--secondary {\r\n//       color: #333;\r\n//       background-color: transparent;\r\n//       box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n//     }\r\n//     .storybook-button--small {\r\n//       font-size: 12px;\r\n//       padding: 10px 16px;\r\n//     }\r\n//     .storybook-button--medium {\r\n//       font-size: 14px;\r\n//       padding: 11px 20px;\r\n//     }\r\n//     .storybook-button--large {\r\n//       font-size: 16px;\r\n//       padding: 12px 24px;\r\n//     }\r\n    ",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<ng-container *ngTemplateOutlet=\"buttonConfig['text'] ? text : image\">\r\n</ng-container>\r\n<ng-template #text>\r\n    <button type=\"button\" class=\"text-btn\">\r\n        {{ buttonConfig.text}}\r\n    </button>\r\n</ng-template>\r\n<ng-template #image class=\"img-btn\">\r\n    <img alt=\"image button\" [src]=\"buttonConfig.src\">\r\n</ng-template>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-00fb13d7a1847703f8749cc275b4ab44-2",
            "file": "src/app/shared-components/btn-component/btn-component.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./btn-component.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./btn-component.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonConfig",
                    "defaultValue": "null",
                    "line": 9,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  templateUrl: './btn-component.component.html',\r\n  styleUrls: ['./btn-component.component.scss']\r\n})\r\nexport class ButtonComponent {\r\n  @Input() buttonConfig: any = null;\r\n  constructor() { }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    color: var(--text-color);\r\n  }\r\n.text-btn{\r\n    // background-color: #1abc9c;\r\n    color: white;\r\n    // margin: 8px 0;\r\n    // border: none;\r\n    // cursor: pointer;\r\n    // width: 100%;\r\n    // font-size: 18px;\r\n    font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n    font-weight: 700;\r\n    border: 0;\r\n    border-radius: 3em;\r\n    cursor: pointer;\r\n    display: inline-block;\r\n    line-height: 1;\r\n    background-color: #1abc9c;\r\n    font-size: 20px;\r\n    padding: 8px  0px;\r\n}\r\n\r\n.img-btn{\r\n      position: 'relative';\r\n      width: '100px';\r\n      height: '100px';\r\n      cursor: pointer;\r\n}\r\n\r\n",
                    "styleUrl": "./btn-component.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "ButtonComponent-2",
            "templateData": "<!-- <ng-container *ngTemplateOutlet=\"buttonConfig['text'] ? text : image\">\r\n</ng-container>\r\n<ng-template #text>\r\n    <button type=\"button\" class=\"text-btn\">\r\n        {{ buttonConfig.text}}\r\n    </button>\r\n</ng-template>\r\n<ng-template #image class=\"img-btn\">\r\n    <img alt=\"image button\" [src]=\"buttonConfig.src\">\r\n</ng-template> -->\r\n\r\n<ng-container *ngIf=\"buttonConfig?.text then text else image\">\r\n</ng-container>\r\n<ng-template #text>\r\n <button type=\"button\" class=\"text-btn\">\r\n {{ buttonConfig?.text}}\r\n </button>\r\n</ng-template>\r\n<ng-template #image class=\"img-btn\">\r\n <img alt=\"image button\" [src]=\"buttonConfig?.src\">\r\n</ng-template>"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-bafb7631b1468b7fa627a2bfdee9ee97",
            "file": "src/app/shared/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sa-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "category",
                    "line": 11,
                    "type": "any"
                },
                {
                    "name": "desc",
                    "line": 10,
                    "type": "any"
                },
                {
                    "name": "id",
                    "line": 13,
                    "type": "any"
                },
                {
                    "name": "isLoggedIn",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "title",
                    "line": 9,
                    "type": "any"
                },
                {
                    "name": "year",
                    "line": 12,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 16,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "delete",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 19,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "remove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "update",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'sa-card',\r\n    templateUrl: './card.component.html',\r\n    styleUrls: ['./card.component.scss']\r\n})\r\nexport class CardComponent implements OnInit {\r\n    @Input() title: any;\r\n    @Input() desc: any;\r\n    @Input() category: any;\r\n    @Input() year: any;\r\n    @Input() id: any;\r\n    @Input() isLoggedIn: boolean;\r\n    @Output()\r\n    change: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    @Output()\r\n    delete: EventEmitter<any> = new EventEmitter<any>();\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n        console.log(this.title, this.desc, this.category);\r\n\r\n    }\r\n    update() {\r\n        this.change.emit(this.id);\r\n    }\r\n\r\n    remove(){\r\n        this.delete.emit(this.id)\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card {\r\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\r\n    transition: 0.3s;\r\n    width: 100%;\r\n    margin-top: 1rem;\r\n  }\r\n  \r\n  .card:hover {\r\n    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\r\n  }\r\n  \r\n  .container {\r\n      \r\n    padding: 2px 16px;\r\n    display: grid;\r\n    grid-template-columns: auto auto auto auto;\r\n    img{\r\n        margin-top: 4.5rem;\r\n    }\r\n     .btn-remove{\r\n        margin-top: 3.5rem;\r\n    }\r\n    .btn-update{\r\n        margin-top: 3.5rem;\r\n    }\r\n  }",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\">\r\n    <div class=\"container\">\r\n        <img src=\"../../../assets/svg/movie.svg\">\r\n        <div class=\"data\">\r\n            <h2><b>{{title}}</b></h2>\r\n            <p>{{desc}}</p>\r\n            <p>Category: <span> &nbsp;<b>{{category}}</b></span></p>\r\n            <p>Year:<span>&nbsp;<b>{{year}}</b></span></p>\r\n        </div>\r\n        <app-button class=\"btn-update\" *ngIf=\"isLoggedIn\" [buttonConfig]=\"{src: '../../../assets/svg/update.svg'}\" (click) = \"update()\"></app-button>\r\n        <app-button class=\"btn-remove\" *ngIf=\"isLoggedIn\" [buttonConfig]=\"{src: '../../../assets/svg/delete.svg'}\" (click) = \"remove()\"></app-button>\r\n    </div>\r\n</div>"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-45c383fa98f07ed27495262b8237f1cf-1",
            "file": "src/app/shared-components/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sa-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "category",
                    "line": 11,
                    "type": "any"
                },
                {
                    "name": "desc",
                    "line": 10,
                    "type": "any"
                },
                {
                    "name": "id",
                    "line": 13,
                    "type": "any"
                },
                {
                    "name": "isLoggedIn",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "title",
                    "line": 9,
                    "type": "any"
                },
                {
                    "name": "year",
                    "line": 12,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 16,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "delete",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 19,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "remove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "update",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'sa-card',\r\n    templateUrl: './card.component.html',\r\n    styleUrls: ['./card.component.scss']\r\n})\r\nexport class CardComponent implements OnInit {\r\n    @Input() title: any;\r\n    @Input() desc: any;\r\n    @Input() category: any;\r\n    @Input() year: any;\r\n    @Input() id: any;\r\n    @Input() isLoggedIn: boolean;\r\n    @Output()\r\n    change: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    @Output()\r\n    delete: EventEmitter<any> = new EventEmitter<any>();\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n    }\r\n    update() {\r\n        this.change.emit(this.id);\r\n    }\r\n\r\n    remove(){\r\n        this.delete.emit(this.id)\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card {\r\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\r\n    transition: 0.3s;\r\n    width: 100%;\r\n    margin-top: 1rem;\r\n  }\r\n  \r\n  .card:hover {\r\n    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\r\n  }\r\n  \r\n  .container {\r\n    padding: 2px 16px;\r\n    display: grid;\r\n    grid-template-columns: auto auto auto auto;\r\n    img{\r\n        margin-top: 1.5rem;\r\n        @media screen and (min-width: 320px) and (max-width: 375px)  {\r\n          width: 30px;\r\n          height: 30px;\r\n        }\r\n    }\r\n     .btn-remove{\r\n        margin-top: 3.5rem;\r\n        cursor: pointer;\r\n    }\r\n    .btn-update{\r\n        margin-top: 3.5rem;\r\n        cursor: pointer;\r\n    }\r\n    .data{\r\n      text-align: start;\r\n      width: 450px;\r\n      h2{\r\n        @media screen and (min-width: 320px) and (max-width: 375px)  {\r\n          font-size: 16px;\r\n        }\r\n      }\r\n      @media screen and (min-width: 320px) and (max-width: 375px)  {\r\n        width: 105px;\r\n        h2{\r\n          font-size: 16px;\r\n        }\r\n        p{\r\n          font-size: 12px;\r\n        }\r\n      }\r\n      @media screen and (min-width: 375px) and (max-width: 425px)  {\r\n        width: 105px;\r\n        h2{\r\n          font-size: 16px;\r\n        }\r\n        p{\r\n          font-size: 12px;\r\n        }\r\n      }\r\n      @media screen and (min-width: 425px) and (max-width: 768px)  {\r\n        width: 150px;\r\n        h2{\r\n          font-size: 16px;\r\n        }\r\n        p{\r\n          font-size: 12px;\r\n        }\r\n      }\r\n\r\n      @media screen and (min-width: 768px) and (max-width: 1024px)  {\r\n        width: 243px;\r\n        h2{\r\n          font-size: 16px;\r\n        }\r\n        p{\r\n          font-size: 12px;\r\n        }\r\n      }\r\n      h2{\r\n        word-wrap: break-word;\r\n      }\r\n      p{\r\n        word-wrap: break-word;\r\n      }\r\n    }\r\n  }",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CardComponent-1",
            "templateData": "<div class=\"card\">\r\n    <div class=\"container\">\r\n        <img src=\"../../../assets/svg/popcorn.svg\">\r\n        <div class=\"data\">\r\n            <h2><b>{{title}}</b></h2>\r\n            <p>{{desc}}</p>\r\n            <p>Category: <span> &nbsp;<b>{{category}}</b></span></p>\r\n            <p>Year:<span>&nbsp;<b>{{year}}</b></span></p>\r\n        </div>\r\n        <app-button class=\"btn-update\" *ngIf=\"isLoggedIn\" [buttonConfig]=\"{src: '../../../assets/svg/update.svg'}\" (click) = \"update()\"></app-button>\r\n        <app-button class=\"btn-remove\" *ngIf=\"isLoggedIn\" [buttonConfig]=\"{src: '../../../assets/svg/delete.svg'}\" (click) = \"remove()\"></app-button>\r\n    </div>\r\n</div>"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-6211abac6fd8b1c466ef5e99bef552c1",
            "file": "src/app/components/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "add",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "darkTheme",
                    "defaultValue": "new FormControl(false)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "id",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isUpdate",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "selectData$",
                    "defaultValue": "this.store.select(selectData)",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectIsLoggedIn$",
                    "defaultValue": "this.store.select(selectIsLoggedIn)",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "store",
                    "type": "Store<AppState>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "updateForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "user",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83
                },
                {
                    "name": "OnClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109
                },
                {
                    "name": "onUpdate",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUpdateLink",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { User } from 'src/app/models/user';\nimport { AccountService } from 'src/app/services/account.service';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/app.model';\nimport { Observable } from 'rxjs';\nimport { selectIsLoggedIn, selectData } from 'src/app/store/app.selectors';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { IsLoggedIn, SaveSharedLinks, DeleteLink, FetchUserData, UpdateLink } from 'src/app/store/app.actions';\nimport * as uuid from 'uuid';\nimport { ThemeService } from 'src/app/services/theme.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n  form: FormGroup;\n  updateForm: FormGroup;\n  user: boolean;\n  add: boolean = false;\n  darkTheme = new FormControl(false);\n  submitted = false;\n  isUpdate = false;\n  public id = null;\n  public selectIsLoggedIn$: Observable<boolean> = this.store.select(selectIsLoggedIn);\n  public selectData$: Observable<any> = this.store.select(selectData);\n  constructor(\n    private accountService: AccountService,\n    public store: Store<AppState>,\n    private themeService: ThemeService,\n    private formBuilder: FormBuilder) {\n    this.store.dispatch(new FetchUserData());\n    this.store.dispatch(new IsLoggedIn(true));\n    this.selectIsLoggedIn$.subscribe(val => {\n      this.user = val\n    })\n\n    this.darkTheme.valueChanges.subscribe(value => {\n      if (value) {\n        this.themeService.toggleDark();\n      } else {\n        this.themeService.toggleLight();\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      title: ['', Validators.required],\n      desc: ['', Validators.required],\n      category: ['', Validators.required],\n      releaseDate: ['', Validators.required]\n    });\n\n    this.updateForm = this.formBuilder.group({\n      updateTitle: ['', Validators.required],\n      updateDesc: ['', Validators.required],\n      updateCategory: ['', Validators.required],\n      updateYear: ['', Validators.required]\n    });\n  }\n  logout() {\n    this.accountService.logout();\n  }\n  OnClick() {\n    this.add = true\n    this.isUpdate = false\n  }\n\n  onUpdate(id) {\n    this.id = id\n    this.isUpdate = true\n    this.add = false\n    window.scrollTo(0, 0);\n  }\n  onDelete(id) {\n    this.store.dispatch(new DeleteLink(id));\n    this.store.dispatch(new FetchUserData());\n  }\n\n  onCancel() {\n    this.add = false;\n    this.isUpdate = false\n  }\n\n  onUpdateLink() {\n    this.submitted = true;\n    if (this.updateForm.invalid) {\n      return;\n    }\n    const requestBody = {\n      id: this.id,\n      title: this.updateForm.value.updateTitle,\n      description: this.updateForm.value.updateDesc,\n      year: this.updateForm.value.updateYear,\n      category: this.updateForm.value.updateCategory\n    }\n    this.store.dispatch(new UpdateLink(this.id, requestBody))\n    this.store.dispatch(new FetchUserData())\n    this.isUpdate = false\n  }\n\n  get f() { return this.form.controls; }\n\n  get fc() { return this.updateForm.controls; }\n\n  onSubmit() {\n    this.submitted = true;\n    this.id = null\n    if (this.form.invalid) {\n      return;\n    }\n    this.add = false\n    const myId = uuid.v4();\n    const requestBody = {\n      id: myId,\n      title: this.form.value.title,\n      description: this.form.value.desc,\n      category: this.form.value.category,\n      year: this.form.value.releaseDate\n    }\n    this.store.dispatch(new SaveSharedLinks(requestBody))\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  background-color: var(--primary-color);\r\n  color: var(--text-color);\r\n}\r\n.item1 {\r\n  grid-area: header;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background-color: #1abc9c;\r\n  height: 80px;\r\n  .head-line {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 17rem;\r\n    h1 {\r\n      @media screen and (min-width: 320px) and (max-width: 480px) {\r\n        font-size: 14px;\r\n        margin-top: 1.5rem;\r\n      }\r\n    }\r\n    img {\r\n      margin-top: 1rem;\r\n    }\r\n  }\r\n  .btns {\r\n    display: flex;\r\n    flex-flow: row;\r\n    margin: 1rem;\r\n    .btn-theme {\r\n      margin-top: .5rem;\r\n    }\r\n    .btn-logout {\r\n      margin: 1rem 1rem;\r\n      cursor: pointer;\r\n    }\r\n    .btn-add {\r\n      margin: 0.5rem 1rem;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n}\r\n\r\nbody {\r\n  font-family: Arial, Helvetica, sans-serif;\r\n}\r\nform {\r\n  border: 3px solid #f1f1f1;\r\n}\r\n.item2 {\r\n  input[type=\"text\"],\r\n  input[type=\"password\"] {\r\n    width: 100%;\r\n    padding: 12px 20px;\r\n    margin: 8px 0;\r\n    display: inline-block;\r\n    border: 1px solid #ccc;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  button {\r\n    background-color: #1abc9c;\r\n    color: white;\r\n    padding: 14px 20px;\r\n    margin: 8px 0;\r\n    border: none;\r\n    cursor: pointer;\r\n    width: 100%;\r\n  }\r\n\r\n  .btn-cancel {\r\n    background-color: lightsalmon;\r\n    color: white;\r\n    padding: 14px 20px;\r\n    margin: 8px 0;\r\n    border: none;\r\n    cursor: pointer;\r\n    width: 100%;\r\n  }\r\n\r\n  .btn-reg:hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button:hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  .cancelbtn {\r\n    width: auto;\r\n    padding: 10px 18px;\r\n    background-color: #f44336;\r\n  }\r\n\r\n  .imgcontainer {\r\n    text-align: center;\r\n    margin: 24px 0 12px 0;\r\n  }\r\n\r\n  img.avatar {\r\n    width: 40%;\r\n    border-radius: 50%;\r\n  }\r\n\r\n  .container {\r\n    padding: 16px;\r\n  }\r\n\r\n  span.psw {\r\n    float: right;\r\n    padding-top: 16px;\r\n  }\r\n}\r\n.item3 {\r\n  grid-area: main;\r\n  display: grid;\r\n  width: 100%;\r\n  column-width: 19em;\r\n  -webkit-column-width: 19em;\r\n  column-gap: 1em;\r\n  -webkit-column-gap: 1em;\r\n}\r\n.item4 {\r\n  grid-area: right;\r\n}\r\n.item5 {\r\n  grid-area: footer;\r\n}\r\n\r\n.grid-container {\r\n  display: grid;\r\n  grid-template-areas:\r\n    \"header header header header header header\"\r\n    \"menu menu menu menu menu menu\"\r\n    \"main main main main main main\"\r\n    \"footer footer footer footer footer footer\";\r\n  grid-gap: 10px;\r\n  //   background-color: #2196F3;\r\n  padding: 10px;\r\n}\r\n\r\n.grid-container > div {\r\n  //   background-color: rgba(255, 255, 255, 0.8);\r\n  text-align: center;\r\n  padding: 20px 0;\r\n  font-size: 30px;\r\n}\r\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "accountService",
                        "type": "AccountService"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "f": {
                    "name": "f",
                    "getSignature": {
                        "name": "f",
                        "type": "",
                        "returnType": "",
                        "line": 105
                    }
                },
                "fc": {
                    "name": "fc",
                    "getSignature": {
                        "name": "fc",
                        "type": "",
                        "returnType": "",
                        "line": 107
                    }
                }
            },
            "templateData": "<div *ngIf=\"user\">\n    <div class=\"item1\">\n        <div class=\"head-line\"> <h1>Movie Share</h1><span><img src=\"../assets/svg/movie-recorder-svgrepo-com.svg\"/></span></div>\n        <div class=\"btns\">\n              <app-theme class=\"btn-theme\"></app-theme>\n            <app-button class=\"btn-add\" [buttonConfig]=\"{text: 'Add Movies'}\" (click)=\"OnClick()\"></app-button>\n          <app-button class=\"btn-logout\" [buttonConfig]=\"{src: '../../../assets/svg/logout.svg'}\" (click)=\"logout()\"></app-button>\n        </div>\n        \n    </div>\n    <div *ngIf=\"add\" class=\"item2\">\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"container\">\n                <label>Title</label>\n                <input type=\"text\" formControlName=\"title\" />\n                <div *ngIf=\"submitted && f.title.errors\">\n                    <div *ngIf=\"f.title.errors.required\">Title is required</div>\n                </div>\n                <label>Description</label>\n                <input type=\"text\" formControlName=\"desc\" />\n                <div *ngIf=\"submitted && f.desc.errors\">\n                    <div *ngIf=\"f.desc.errors.required\">Description is required</div>\n                </div>\n                <label>Category</label>\n                <input type=\"text\" formControlName=\"category\" />\n                <div *ngIf=\"submitted && f.category.errors\">\n                    <div *ngIf=\"f.category.errors.required\">Category is required</div>\n                </div>\n                <label>Release Date</label>&nbsp;&nbsp;\n                <input type=\"date\" formControlName=\"releaseDate\" />\n                <div *ngIf=\"submitted && f.releaseDate.errors\">\n                    <div *ngIf=\"f.releaseDate.errors.required\">Release Date is required</div>\n                </div>\n                <button>\n                    Add\n                </button>\n                <button class=\"btn-cancel\" (click) = \"onCancel()\">Cancel</button>\n            </div>\n               \n        </form>\n    </div>\n    <div *ngIf=\"isUpdate\" class=\"item2\">\n        <form [formGroup]=\"updateForm\" (ngSubmit)=\"onUpdateLink()\" >\n            <div class=\"container\">\n                <label>Title</label>\n                <input type=\"text\" formControlName=\"updateTitle\" />\n                <div *ngIf=\"submitted && fc.updateTitle.errors\">\n                    <div *ngIf=\"fc.updateTitle.errors.required\">Title is required</div>\n                </div>\n                <label>Description</label>\n                <input type=\"text\" formControlName=\"updateDesc\" />\n                <div *ngIf=\"submitted && fc.updateDesc.errors\">\n                    <div *ngIf=\"fc.updateDesc.errors.required\">Description is required</div>\n                </div>\n                <label>Category</label>\n                <input type=\"text\" formControlName=\"updateCategory\" />\n                <div *ngIf=\"submitted && fc.updateCategory.errors\">\n                    <div *ngIf=\"fc.updateCategory.errors.required\">Category is required</div>\n                </div>\n                <label>Release Date</label>&nbsp;&nbsp;\n                <input type=\"date\" formControlName=\"updateYear\" />\n                <div *ngIf=\"submitted && fc.updateYear.errors\">\n                    <div *ngIf=\"fc.updateYear.errors.required\">Release Date is required</div>\n                </div>\n                <button>\n                    Update\n                </button>\n                <button class=\"btn-cancel\" (click) = \"onCancel()\">Cancel</button>\n            </div>\n        </form>\n    </div>\n    <section>\n        <div *ngFor=\"let data of (selectData$ | async)\">\n            <div>\n                <div>\n                    <sa-card title=\"{{data.title}}\" desc=\"{{data.description}}\" category=\"{{data.category}}\"\n                        year=\"{{data.year}}\" isLoggedIn = \"user\" id = \"{{data.id}}\" (change) = \"onUpdate($event)\" (delete) = \"onDelete($event)\">\n                    </sa-card>\n                </div>\n            </div>\n        </div>\n    </section>\n</div>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-56797e91e19a74b10bed1bce94c28b4e",
            "file": "src/app/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "store",
                    "type": "Store<AppState>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AccountService } from 'src/app/services/account.service';\nimport { first } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/app.model';\nimport { IsLoggedIn } from 'src/app/store/app.actions';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n    form: FormGroup;\n    loading = false;\n    submitted = false;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private accountService: AccountService,\n        public store: Store<AppState>\n    ) {\n        this.form = this.formBuilder.group({\n            username: ['', Validators.required],\n            password: ['', Validators.required]\n        });\n\n    }\n\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n            username: ['', Validators.required],\n            password: ['', Validators.required]\n        });\n    }\n\n\n    get f() { return this.form.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n        if (this.form.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.accountService.login(this.f.username.value, this.f.password.value)\n            .pipe(first())\n            .subscribe({\n                next: () => {\n                    this.router.navigate(['/home']);\n                    this.store.dispatch(new IsLoggedIn(true));\n                },\n                error: error => {\n                    this.loading = false;\n                }\n            });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// .container{\r\n//     border: 2px solid steelblue;\r\n// }\r\n\r\n\r\nbody {font-family: Arial, Helvetica, sans-serif;}\r\nform {border: 3px solid #f1f1f1;\r\n    h1{\r\n        text-align: center;\r\n        color: #1abc9c;\r\n    }\r\n}\r\n\r\ninput[type=text], input[type=password] {\r\n  width: 100%;\r\n  padding: 12px 20px;\r\n  margin: 8px 0;\r\n  display: inline-block;\r\n  border: 1px solid #ccc;\r\n  box-sizing: border-box;\r\n}\r\n\r\nbutton {\r\n  background-color: #1abc9c;\r\n  color: white;\r\n  padding: 14px 20px;\r\n  margin: 8px 0;\r\n  border: none;\r\n  cursor: pointer;\r\n  width: 100%;\r\n}\r\n\r\n.btn-reg{\r\n    background-color: #1C4C73;\r\n    color: white;\r\n    padding: 14px 20px;\r\n    margin: 8px 0;\r\n    border: none;\r\n    cursor: pointer;\r\n    width: 100%;\r\n}\r\n\r\n.btn-reg:hover{\r\n    opacity: 0.8;\r\n}\r\n\r\nbutton:hover {\r\n  opacity: 0.8;\r\n}\r\n\r\n.cancelbtn {\r\n  width: auto;\r\n  padding: 10px 18px;\r\n  background-color: #f44336;\r\n}\r\n\r\n.imgcontainer {\r\n  text-align: center;\r\n  margin: 24px 0 12px 0;\r\n}\r\n\r\nimg.avatar {\r\n  width: 40%;\r\n  border-radius: 50%;\r\n}\r\n\r\n.container {\r\n  padding: 16px;\r\n}\r\n\r\nspan.psw {\r\n  float: right;\r\n  padding-top: 16px;\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "f": {
                    "name": "f",
                    "getSignature": {
                        "name": "f",
                        "type": "",
                        "returnType": "",
                        "line": 42
                    }
                }
            },
            "templateData": "<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n    <h1>Login</h1>\n    <div class=\"container\">\n      <label for=\"uname\"><b>Username</b></label>\n      <input type=\"text\" placeholder=\"Enter Username\" formControlName=\"username\"/>\n      <div *ngIf=\"submitted && f.username.errors\">\n        <div *ngIf=\"f.username.errors.required\">Username is required</div>\n     </div>\n  \n      <label for=\"psw\"><b>Password</b></label>\n      <input type=\"password\" placeholder=\"Enter Password\" formControlName=\"password\"/>\n      <div *ngIf=\"submitted && f.password.errors\">\n        <div *ngIf=\"f.password.errors.required\">Password is required</div>\n      </div>\n      <button type=\"submit\" [disabled]=\"loading\">Login</button>\n      <button class=\"btn-reg\" routerLink=\"/register\">Register</button>\n    </div>\n  </form>\n"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-d219f042f104b5812efd64a636ae4a21",
            "file": "src/app/shared/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sa-modal",
            "styleUrls": [
                "./modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ElementRef } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'sa-modal',\r\n    templateUrl: './modal.component.html',\r\n    styleUrls: ['./modal.component.scss']\r\n})\r\nexport class ModalComponent implements OnInit {\r\n    constructor(private el: ElementRef) { }\r\n    ngOnInit() {\r\n        // we added this so that when the backdrop is clicked the modal is closed.\r\n        this.el.nativeElement.addEventListener('click', () => {\r\n            this.close()\r\n        })\r\n    }\r\n    close() {\r\n        this.el.nativeElement.classList.remove('sshow')\r\n        this.el.nativeElement.classList.add('hhidden')\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// this makes the .modal visible\r\n.sshow {\r\n    display: block;\r\n}\r\n// this makes the element hidden/invisible\r\n.hhidden {\r\n    display: none;\r\n}\r\n// this holds the CSS display of the modal\r\n.mmodal {\r\n    // makes it hover above all elements\r\n    z-index: 1000;\r\n    position: fixed;\r\n    top: 30px;\r\n    bottom: 0;\r\n    left: 300px;\r\n    width: 500px;\r\n}\r\n.mmodal-body {\r\n    background: #fff;\r\n    margin: 40px;\r\n    padding: 20px;\r\n}\r\n// backdrop color\r\n.mmodal-background {\r\n    // should be below the .modal but above all other elements\r\n    z-index: 900;\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    background-color: #000;\r\n    // makes the below elements visible to a degree.\r\n    opacity: 0.95;\r\n}",
                    "styleUrl": "./modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"mmodal\">\r\n    <div class=\"mmodal-body\">\r\n        <ng-content></ng-content>\r\n    </div>\r\n</div>\r\n<div class=\"mmodal-background\"></div>"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-1d5b2ef4224964336cf64b587efa1880-1",
            "file": "src/app/shared-components/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal",
            "styleUrls": [
                "./modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ElementRef } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-modal',\r\n    templateUrl: './modal.component.html',\r\n    styleUrls: ['./modal.component.scss']\r\n})\r\nexport class ModalComponent implements OnInit {\r\n    constructor(private el: ElementRef) { }\r\n    ngOnInit() {\r\n        // we added this so that when the backdrop is clicked the modal is closed.\r\n        this.el.nativeElement.addEventListener('click', () => {\r\n            this.close();\r\n        });\r\n    }\r\n    close() {\r\n        this.el.nativeElement.classList.remove('sshow');\r\n        this.el.nativeElement.classList.add('hhidden');\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.sshow {\r\n    display: block;\r\n}\r\n.hhidden {\r\n    display: none;\r\n}\r\n.mmodal {\r\n    z-index: 1000;\r\n    position: fixed;\r\n    top: 30px;\r\n    bottom: 0;\r\n    left: 300px;\r\n    width: 500px;\r\n}\r\n.mmodal-body {\r\n    background: #fff;\r\n    margin: 40px;\r\n    padding: 20px;\r\n}\r\n.mmodal-background {\r\n    z-index: 900;\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    background-color: #000;\r\n    // makes the below elements visible to a degree.\r\n    opacity: 0.95;\r\n}",
                    "styleUrl": "./modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ModalComponent-1",
            "templateData": "<div class=\"mmodal\">\r\n    <div class=\"mmodal-body\">\r\n        <ng-content></ng-content>\r\n    </div>\r\n</div>\r\n<div class=\"mmodal-background\"></div>"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-121863ae4db09c51975f616bfe98aeb4",
            "file": "src/app/components/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AccountService } from 'src/app/services/account.service';\nimport { first } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n  form: FormGroup;\n  loading = false;\n  submitted = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private accountService: AccountService\n  ) { }\n\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      username: ['', Validators.required],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  get f() { return this.form.controls; }\n\n  onSubmit() {\n    this.submitted = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    this.accountService.register(this.form.value)\n      .pipe(first())\n      .subscribe({\n        next: () => {\n          this.router.navigate(['../login'], { relativeTo: this.route });\n        },\n        error: error => {\n          this.loading = false;\n        }\n      });\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// .container{\r\n//     border: 2px solid steelblue;\r\n// }\r\n\r\n\r\nbody {font-family: Arial, Helvetica, sans-serif;}\r\nform {border: 3px solid #f1f1f1;\r\n    h1{\r\n        text-align: center;\r\n        color: #1abc9c;\r\n    }\r\n}\r\n\r\ninput[type=text], input[type=password] {\r\n  width: 100%;\r\n  padding: 12px 20px;\r\n  margin: 8px 0;\r\n  display: inline-block;\r\n  border: 1px solid #ccc;\r\n  box-sizing: border-box;\r\n}\r\n\r\nbutton {\r\n  background-color: #1abc9c;\r\n  color: white;\r\n  padding: 14px 20px;\r\n  margin: 8px 0;\r\n  border: none;\r\n  cursor: pointer;\r\n  width: 100%;\r\n}\r\n\r\n.btn-cancel{\r\n    background-color: lightsalmon;\r\n    color: white;\r\n    padding: 14px 20px;\r\n    margin: 8px 0;\r\n    border: none;\r\n    cursor: pointer;\r\n    width: 100%;\r\n}\r\n\r\n.btn-reg:hover{\r\n    opacity: 0.8;\r\n}\r\n\r\nbutton:hover {\r\n  opacity: 0.8;\r\n}\r\n\r\n.cancelbtn {\r\n  width: auto;\r\n  padding: 10px 18px;\r\n  background-color: #f44336;\r\n}\r\n\r\n.imgcontainer {\r\n  text-align: center;\r\n  margin: 24px 0 12px 0;\r\n}\r\n\r\nimg.avatar {\r\n  width: 40%;\r\n  border-radius: 50%;\r\n}\r\n\r\n.container {\r\n  padding: 16px;\r\n}\r\n\r\nspan.psw {\r\n  float: right;\r\n  padding-top: 16px;\r\n}\r\n",
                    "styleUrl": "./register.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "f": {
                    "name": "f",
                    "getSignature": {
                        "name": "f",
                        "type": "",
                        "returnType": "",
                        "line": 32
                    }
                }
            },
            "templateData": "<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n    <h1>Register</h1>\n    <div class=\"container\">\n        <label for=\"firstName\">First Name</label>\n        <input type=\"text\" formControlName=\"firstName\" />\n        <div *ngIf=\"submitted && f.firstName.errors\">\n            <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\n        </div>\n        <label for=\"lastName\">Last Name</label>\n        <input type=\"text\" formControlName=\"lastName\" [ngClass]=\"{ 'is-invalid': submitted && f.lastName.errors }\" />\n        <div *ngIf=\"submitted && f.lastName.errors\">\n            <div *ngIf=\"f.lastName.errors.required\">Last Name is required</div>\n        </div>\n    \n    \n        <label for=\"username\">Username</label>\n        <input type=\"text\" formControlName=\"username\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\n        <div *ngIf=\"submitted && f.username.errors\">\n            <div *ngIf=\"f.username.errors.required\">Username is required</div>\n        </div>\n\n    \n        <label for=\"password\">Password</label>\n        <input type=\"password\" formControlName=\"password\"\n            [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n        <div *ngIf=\"submitted && f.password.errors\">\n            <div *ngIf=\"f.password.errors.required\">Password is required</div>\n            <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\n        </div>\n    \n    \n        <button [disabled]=\"loading\">\n            <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n            Register\n        </button>\n        <button class=\"btn-cancel\" routerLink=\"/login\">Cancel</button>\n    </div>\n       \n</form>"
        },
        {
            "name": "ThemeComponent",
            "id": "component-ThemeComponent-cf29417732cbf6ce12ec7b99db9326bc",
            "file": "src/app/shared-components/theme-toggle/theme.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-theme",
            "styleUrls": [
                "./theme.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./theme.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "darkTheme",
                    "defaultValue": "new FormControl(false)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ElementRef } from '@angular/core';\r\nimport { ThemeService } from 'src/app/services/theme.service';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'app-theme',\r\n    templateUrl: './theme.component.html',\r\n    styleUrls: ['./theme.component.scss']\r\n})\r\nexport class ThemeComponent{\r\n    constructor(private themeService: ThemeService) { \r\n        this.darkTheme.valueChanges.subscribe(value => {\r\n            if (value) {\r\n              this.themeService.toggleDark();\r\n            } else {\r\n              this.themeService.toggleLight();\r\n            }\r\n          });\r\n    }\r\n    darkTheme = new FormControl(false);\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".switch {\r\n    position: relative;\r\n    display: inline-block;\r\n    width: 60px;\r\n    height: 34px;\r\n  }\r\n  .switch input { \r\n    opacity: 0;\r\n    width: 0;\r\n    height: 0;\r\n  }\r\n  \r\n  .slider {\r\n    position: absolute;\r\n    cursor: pointer;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: black;\r\n    -webkit-transition: .4s;\r\n    transition: .4s;\r\n  }\r\n  \r\n  .slider:before {\r\n    position: absolute;\r\n    content: \"\";\r\n    height: 26px;\r\n    width: 26px;\r\n    left: 4px;\r\n    bottom: 4px;\r\n    background-color: #1abc9c;\r\n    -webkit-transition: .4s;\r\n    transition: .4s;\r\n  }    \r\n  input:checked + .slider {\r\n    background-color: white;\r\n  }\r\n  \r\n  input:focus + .slider {\r\n    box-shadow: 0 0 1px white;\r\n  }\r\n  \r\n  input:checked + .slider:before {\r\n    -webkit-transform: translateX(26px);\r\n    -ms-transform: translateX(26px);\r\n    transform: translateX(26px);\r\n  }\r\n  .slider.round {\r\n    border-radius: 34px;\r\n  }\r\n  \r\n  .slider.round:before {\r\n    border-radius: 50%;\r\n  }\r\n",
                    "styleUrl": "./theme.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<label class=\"switch\">\r\n    <input  id=\"darkTheme\" type=\"checkbox\"  [formControl]=\"darkTheme\"/>\r\n    <span class=\"slider round\"></span>\r\n  </label>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ErrorInterceptorInterceptor"
                        },
                        {
                            "name": "JwtInterceptorInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        },
                        {
                            "name": "ThemeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "darkTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/theme.service.ts",
                "type": "object",
                "defaultValue": "{\r\n  'primary-color': '#455363',\r\n  'background-color': '#1f2935',\r\n  'text-color': '#fff'\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiUrl: 'http://localhost:4000',\n  url:'http://localhost:3000'\n}"
            },
            {
                "name": "fakeBackendProvider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/helpers/fake-backend-interceptor.interceptor.ts",
                "type": "object",
                "defaultValue": "{\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptorInterceptor,\n  multi: true\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "lightTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/theme.service.ts",
                "type": "object",
                "defaultValue": "{\r\n  'primary-color': '#fff',\r\n  'background-color': '#fff',\r\n  'text-color': '#2d2d2d'\r\n}"
            },
            {
                "name": "mock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/jestGlobalMocks.ts",
                "type": "",
                "defaultValue": "() => {\r\n    let storage = {};\r\n    return {\r\n      getItem: key => key in storage ? storage[key] : null,\r\n      setItem: (key, value) => storage[key] = value || '',\r\n      removeItem: key => delete storage[key],\r\n      clear: () => storage = {},\r\n    };\r\n  }"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectApp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.selectors.ts",
                "type": "",
                "defaultValue": "(state: AppState) => state.appModel"
            },
            {
                "name": "selectData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.selectors.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectApp,\r\n    (state: AppModelState) => {\r\n        return state.data;\r\n    }\r\n)"
            },
            {
                "name": "selectIsLoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.selectors.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectApp,\r\n    (state: AppModelState) => {\r\n        return state.isLoggedIn;\r\n    }\r\n)"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "users",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/helpers/fake-backend-interceptor.interceptor.ts",
                "type": "",
                "defaultValue": "JSON.parse(localStorage.getItem(usersKey)) || []"
            },
            {
                "name": "usersKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/helpers/fake-backend-interceptor.interceptor.ts",
                "type": "string",
                "defaultValue": "'angular-10-registration-login-example-users'"
            }
        ],
        "functions": [
            {
                "name": "appReducer",
                "file": "src/app/store/app.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "AppModelState",
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "httpTranslateLoader",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AppAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "FetchUserData | FetchUserDataSuccess | IsLoggedIn | SaveSharedLinks | SaveSharedLinksSuccess | SaveSharedLinksError",
                "file": "src/app/store/app.actions.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "AppActionType",
                "childs": [
                    {
                        "name": "FETCH_USER_DATA",
                        "value": "Activity: FETCH_USER_DATA"
                    },
                    {
                        "name": "FETCH_USER_DATA_SUCCESS",
                        "value": "Activity: FETCH_USER_DATA_SUCCESS"
                    },
                    {
                        "name": "FETCH_USER_DATA_ERROR",
                        "value": "Activity: FETCH_USER_DATA_ERROR"
                    },
                    {
                        "name": "IS_LOGGED_IN",
                        "value": "Activity: IS_LOGGED_IN"
                    },
                    {
                        "name": "IS_LOGGED_IN_SUCCESS",
                        "value": "Activity: IS_LOGGED_IN_SUCCESS"
                    },
                    {
                        "name": "SAVE_SHARED_LINKS",
                        "value": "Activity: SAVE_SHARED_LINKS"
                    },
                    {
                        "name": "SAVE_SHARED_LINKS_SUCCESS",
                        "value": "Activity: SAVE_SHARED_LINKS_SUCCESS"
                    },
                    {
                        "name": "SAVE_SHARED_LINKS_ERROR",
                        "value": "Activity: SAVE_SHARED_LINKS_ERROR"
                    },
                    {
                        "name": "DELETE_LINK",
                        "value": "Activity: DELETE_LINK"
                    },
                    {
                        "name": "DELETE_LINK_SUCCESS",
                        "value": "Activity: DELETE_LINK_SUCCESS"
                    },
                    {
                        "name": "DELETE_LINK_ERROR",
                        "value": "Activity: DELETE_LINK_ERROR"
                    },
                    {
                        "name": "UPDATE_LINK",
                        "value": "Activity: UPDATE_LINK"
                    },
                    {
                        "name": "UPDATE_LINK_SUCCESS",
                        "value": "Activity: UPDATE_LINK_SUCCESS"
                    },
                    {
                        "name": "UPDATE_LINK_ERROR",
                        "value": "Activity: UPDATE_LINK_SUCCESS"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/app.actions.ts"
            }
        ],
        "groupedVariables": {
            "src/app/services/theme.service.ts": [
                {
                    "name": "darkTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/theme.service.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  'primary-color': '#455363',\r\n  'background-color': '#1f2935',\r\n  'text-color': '#fff'\r\n}"
                },
                {
                    "name": "lightTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/theme.service.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  'primary-color': '#fff',\r\n  'background-color': '#fff',\r\n  'text-color': '#2d2d2d'\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiUrl: 'http://localhost:4000',\n  url:'http://localhost:3000'\n}"
                }
            ],
            "src/app/helpers/fake-backend-interceptor.interceptor.ts": [
                {
                    "name": "fakeBackendProvider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/helpers/fake-backend-interceptor.interceptor.ts",
                    "type": "object",
                    "defaultValue": "{\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptorInterceptor,\n  multi: true\n}"
                },
                {
                    "name": "users",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/helpers/fake-backend-interceptor.interceptor.ts",
                    "type": "",
                    "defaultValue": "JSON.parse(localStorage.getItem(usersKey)) || []"
                },
                {
                    "name": "usersKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/helpers/fake-backend-interceptor.interceptor.ts",
                    "type": "string",
                    "defaultValue": "'angular-10-registration-login-example-users'"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/jestGlobalMocks.ts": [
                {
                    "name": "mock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/jestGlobalMocks.ts",
                    "type": "",
                    "defaultValue": "() => {\r\n    let storage = {};\r\n    return {\r\n      getItem: key => key in storage ? storage[key] : null,\r\n      setItem: (key, value) => storage[key] = value || '',\r\n      removeItem: key => delete storage[key],\r\n      clear: () => storage = {},\r\n    };\r\n  }"
                }
            ],
            "src/app/store/app.selectors.ts": [
                {
                    "name": "selectApp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.selectors.ts",
                    "type": "",
                    "defaultValue": "(state: AppState) => state.appModel"
                },
                {
                    "name": "selectData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.selectors.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectApp,\r\n    (state: AppModelState) => {\r\n        return state.data;\r\n    }\r\n)"
                },
                {
                    "name": "selectIsLoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.selectors.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectApp,\r\n    (state: AppModelState) => {\r\n        return state.isLoggedIn;\r\n    }\r\n)"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/app.reducer.ts": [
                {
                    "name": "appReducer",
                    "file": "src/app/store/app.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "AppModelState",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "httpTranslateLoader",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/store/app.actions.ts": [
                {
                    "name": "AppActionType",
                    "childs": [
                        {
                            "name": "FETCH_USER_DATA",
                            "value": "Activity: FETCH_USER_DATA"
                        },
                        {
                            "name": "FETCH_USER_DATA_SUCCESS",
                            "value": "Activity: FETCH_USER_DATA_SUCCESS"
                        },
                        {
                            "name": "FETCH_USER_DATA_ERROR",
                            "value": "Activity: FETCH_USER_DATA_ERROR"
                        },
                        {
                            "name": "IS_LOGGED_IN",
                            "value": "Activity: IS_LOGGED_IN"
                        },
                        {
                            "name": "IS_LOGGED_IN_SUCCESS",
                            "value": "Activity: IS_LOGGED_IN_SUCCESS"
                        },
                        {
                            "name": "SAVE_SHARED_LINKS",
                            "value": "Activity: SAVE_SHARED_LINKS"
                        },
                        {
                            "name": "SAVE_SHARED_LINKS_SUCCESS",
                            "value": "Activity: SAVE_SHARED_LINKS_SUCCESS"
                        },
                        {
                            "name": "SAVE_SHARED_LINKS_ERROR",
                            "value": "Activity: SAVE_SHARED_LINKS_ERROR"
                        },
                        {
                            "name": "DELETE_LINK",
                            "value": "Activity: DELETE_LINK"
                        },
                        {
                            "name": "DELETE_LINK_SUCCESS",
                            "value": "Activity: DELETE_LINK_SUCCESS"
                        },
                        {
                            "name": "DELETE_LINK_ERROR",
                            "value": "Activity: DELETE_LINK_ERROR"
                        },
                        {
                            "name": "UPDATE_LINK",
                            "value": "Activity: UPDATE_LINK"
                        },
                        {
                            "name": "UPDATE_LINK_SUCCESS",
                            "value": "Activity: UPDATE_LINK_SUCCESS"
                        },
                        {
                            "name": "UPDATE_LINK_ERROR",
                            "value": "Activity: UPDATE_LINK_SUCCESS"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/app.actions.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/store/app.actions.ts": [
                {
                    "name": "AppAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "FetchUserData | FetchUserDataSuccess | IsLoggedIn | SaveSharedLinks | SaveSharedLinksSuccess | SaveSharedLinksError",
                    "file": "src/app/store/app.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "home",
                        "component": "HomeComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "register",
                        "component": "RegisterComponent"
                    },
                    {
                        "path": "**",
                        "redirectTo": ""
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/app.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "httpTranslateLoader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/effects/app.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/error-interceptor.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ErrorInterceptorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/fake-backend-interceptor.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "FakeBackendInterceptorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/fake-backend-interceptor.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fakeBackendProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/fake-backend-interceptor.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "users",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/fake-backend-interceptor.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "usersKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/jwt-interceptor.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "JwtInterceptorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/appModel.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppModelState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/account.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccountService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/app-service.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppServiceService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "darkTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lightTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared-components/btn-component/btn-component.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared-components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared-components/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared-components/theme-toggle/theme.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThemeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteLink",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteLinkError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteLinkSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FetchUserData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FetchUserDataError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FetchUserDataSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IsLoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SaveSharedLinks",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SaveSharedLinksError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SaveSharedLinksSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateLink",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateLinkError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateLinkSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "appReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectApp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIsLoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/jestGlobalMocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            }
        ]
    }
}